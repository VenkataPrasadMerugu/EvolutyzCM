//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManagerEvolutyz.Web.ContactServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/CM.DAC.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginResponse", Namespace="http://schemas.datacontract.org/2004/07/CMServices")]
    [System.SerializableAttribute()]
    public partial class LoginResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIdField, value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/CM.DAC.Models")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/CM.DAC.Models")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContactIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContactID {
            get {
                return this.ContactIDField;
            }
            set {
                if ((this.ContactIDField.Equals(value) != true)) {
                    this.ContactIDField = value;
                    this.RaisePropertyChanged("ContactID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContactServices.IContactService")]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/RegisterUser", ReplyAction="http://tempuri.org/IContactService/RegisterUserResponse")]
        bool RegisterUser(ContactManagerEvolutyz.Web.ContactServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/RegisterUser", ReplyAction="http://tempuri.org/IContactService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(ContactManagerEvolutyz.Web.ContactServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Greetings", ReplyAction="http://tempuri.org/IContactService/GreetingsResponse")]
        string Greetings(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Greetings", ReplyAction="http://tempuri.org/IContactService/GreetingsResponse")]
        System.Threading.Tasks.Task<string> GreetingsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Login", ReplyAction="http://tempuri.org/IContactService/LoginResponse")]
        ContactManagerEvolutyz.Web.ContactServices.LoginResponse Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Login", ReplyAction="http://tempuri.org/IContactService/LoginResponse")]
        System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.LoginResponse> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Logout", ReplyAction="http://tempuri.org/IContactService/LogoutResponse")]
        void Logout(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Logout", ReplyAction="http://tempuri.org/IContactService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddCategory", ReplyAction="http://tempuri.org/IContactService/AddCategoryResponse")]
        bool AddCategory(string sessionId, string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddCategory", ReplyAction="http://tempuri.org/IContactService/AddCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddCategoryAsync(string sessionId, string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetCategories", ReplyAction="http://tempuri.org/IContactService/GetCategoriesResponse")]
        ContactManagerEvolutyz.Web.ContactServices.Category[] GetCategories(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetCategories", ReplyAction="http://tempuri.org/IContactService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.Category[]> GetCategoriesAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteCategory", ReplyAction="http://tempuri.org/IContactService/DeleteCategoryResponse")]
        bool DeleteCategory(string sessionId, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteCategory", ReplyAction="http://tempuri.org/IContactService/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteCategoryAsync(string sessionId, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetContacts", ReplyAction="http://tempuri.org/IContactService/GetContactsResponse")]
        ContactManagerEvolutyz.Web.ContactServices.Contact[] GetContacts(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetContacts", ReplyAction="http://tempuri.org/IContactService/GetContactsResponse")]
        System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.Contact[]> GetContactsAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        bool AddContact(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        System.Threading.Tasks.Task<bool> AddContactAsync(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateContact", ReplyAction="http://tempuri.org/IContactService/UpdateContactResponse")]
        bool UpdateContact(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateContact", ReplyAction="http://tempuri.org/IContactService/UpdateContactResponse")]
        System.Threading.Tasks.Task<bool> UpdateContactAsync(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        bool DeleteContact(string sessionId, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        System.Threading.Tasks.Task<bool> DeleteContactAsync(string sessionId, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateCategory", ReplyAction="http://tempuri.org/IContactService/UpdateCategoryResponse")]
        bool UpdateCategory(string sessionId, int categoryId, string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdateCategory", ReplyAction="http://tempuri.org/IContactService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateCategoryAsync(string sessionId, int categoryId, string categoryName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : ContactManagerEvolutyz.Web.ContactServices.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<ContactManagerEvolutyz.Web.ContactServices.IContactService>, ContactManagerEvolutyz.Web.ContactServices.IContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(ContactManagerEvolutyz.Web.ContactServices.User user) {
            return base.Channel.RegisterUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(ContactManagerEvolutyz.Web.ContactServices.User user) {
            return base.Channel.RegisterUserAsync(user);
        }
        
        public string Greetings(string name) {
            return base.Channel.Greetings(name);
        }
        
        public System.Threading.Tasks.Task<string> GreetingsAsync(string name) {
            return base.Channel.GreetingsAsync(name);
        }
        
        public ContactManagerEvolutyz.Web.ContactServices.LoginResponse Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.LoginResponse> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(string sessionId) {
            base.Channel.Logout(sessionId);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string sessionId) {
            return base.Channel.LogoutAsync(sessionId);
        }
        
        public bool AddCategory(string sessionId, string categoryName) {
            return base.Channel.AddCategory(sessionId, categoryName);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategoryAsync(string sessionId, string categoryName) {
            return base.Channel.AddCategoryAsync(sessionId, categoryName);
        }
        
        public ContactManagerEvolutyz.Web.ContactServices.Category[] GetCategories(string sessionId) {
            return base.Channel.GetCategories(sessionId);
        }
        
        public System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.Category[]> GetCategoriesAsync(string sessionId) {
            return base.Channel.GetCategoriesAsync(sessionId);
        }
        
        public bool DeleteCategory(string sessionId, int categoryID) {
            return base.Channel.DeleteCategory(sessionId, categoryID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCategoryAsync(string sessionId, int categoryID) {
            return base.Channel.DeleteCategoryAsync(sessionId, categoryID);
        }
        
        public ContactManagerEvolutyz.Web.ContactServices.Contact[] GetContacts(string sessionId) {
            return base.Channel.GetContacts(sessionId);
        }
        
        public System.Threading.Tasks.Task<ContactManagerEvolutyz.Web.ContactServices.Contact[]> GetContactsAsync(string sessionId) {
            return base.Channel.GetContactsAsync(sessionId);
        }
        
        public bool AddContact(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact) {
            return base.Channel.AddContact(sessionId, contact);
        }
        
        public System.Threading.Tasks.Task<bool> AddContactAsync(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact) {
            return base.Channel.AddContactAsync(sessionId, contact);
        }
        
        public bool UpdateContact(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact) {
            return base.Channel.UpdateContact(sessionId, contact);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateContactAsync(string sessionId, ContactManagerEvolutyz.Web.ContactServices.Contact contact) {
            return base.Channel.UpdateContactAsync(sessionId, contact);
        }
        
        public bool DeleteContact(string sessionId, int contactId) {
            return base.Channel.DeleteContact(sessionId, contactId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContactAsync(string sessionId, int contactId) {
            return base.Channel.DeleteContactAsync(sessionId, contactId);
        }
        
        public bool UpdateCategory(string sessionId, int categoryId, string categoryName) {
            return base.Channel.UpdateCategory(sessionId, categoryId, categoryName);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCategoryAsync(string sessionId, int categoryId, string categoryName) {
            return base.Channel.UpdateCategoryAsync(sessionId, categoryId, categoryName);
        }
    }
}
